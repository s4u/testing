name: Pull Request Management

on:
  pull_request:
    types:
      - closed
      - unlabeled
      - demilestoned
  pull_request_review:
    types:
      - submitted

permissions: { }

jobs:
  review-decision:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    outputs:
      approved: ${{ steps.review-decision.outputs.result }}

    steps:
      - name: Get Review decision
        id: review-decision
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const query = `query($owner:String!, $name:String!, $number:Int!) {
              repository(name: $name, owner: $owner) {
                pullRequest(number: $number) {
                  reviewDecision, merged
                }
              }
            }`;
            
            const variables = {
              owner: context.repo.owner,
              name: context.repo.repo,
              number: context.issue.number
            }
            
            const result = await github.graphql(query, variables)
            console.log(result)
            
            return result.repository.pullRequest.reviewDecision == 'APPROVED' || result.repository.pullRequest.merged
      - name: Result
        run: echo "${{ steps.review-decision.outputs.result }}"

  milestone:
    permissions:
      issues: write
      pull-requests: write

    needs: review-decision
    if: >
      github.event.pull_request.milestone == null && 
      ( needs.review-decision.outputs.approved || github.event.action == 'demilestoned' )
    runs-on: ubuntu-latest
    steps:
      - name: Update milestone
        uses: actions/github-script@v7
        with:
          script: |
            const milestones = await github.rest.issues.listMilestones({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });
            
            console.log(milestones);
            
            if ( milestones.data.length == 0 ) {
              throw new Error('There are no open milestones ... please create one')
            }

            if ( milestones.data.length > 1 ) {
              throw new Error('There are more then oen open milestones ... please choose manually')
            }
            
            console.log('Set milestone to: ' + milestones.data[0].title);
            
            const result = await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              milestone: milestones.data[0].number
            });
            
            console.log(result);

  labels:
    permissions:
      issues: write
      pull-requests: write

    needs: review-decision
    runs-on: ubuntu-latest
    if: >
      github.event.pull_request.labels == null &&
      ( needs.review-decision.outputs.approved || github.event.action == 'unlabeled' )
    steps:

      - name: Set default label
        uses: actions/github-script@v7
        env:
          DEFAULT_LABEL: "maintenance"
        with:
          script: |
            
            console.log(context.issue.labels);
            
            if ( !context.issue.labels?.length ) {
            
              if ( !process.env.DEFAULT_LABEL ) {
                throw new ERROR('There are no labels on PR and default label is not set');
              }
            
              const result = await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: [ process.env.DEFAULT_LABEL ]
              });
            
              console.log(result);
            }
