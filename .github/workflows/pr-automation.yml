# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: PR Automation
on:
  pull_request_target:
    types:
      - closed

# allow single build per branch or PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event.number }}
  cancel-in-progress: false

# clare all permissions for GITHUB_TOKEN
permissions: {}

jobs:
  # dump GitHub context only when the workflow is re runed,
  # can help investigate problems
  dump-github-context:
    runs-on: ubuntu-latest
    if: github.run_attempt > 1

    steps:
      - run: echo "ok"
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        shell: bash

  # check PR labels - if is empty list add comments and break the build
  labels:
    permissions:
      issues: write
      pull-requests: write

    if: >
      github.event.action == 'closed' &&
      github.event.pull_request.merged &&
      toJSON(github.event.pull_request.labels) == '[]'
    runs-on: ubuntu-latest
    steps:
      - name: Comment PR
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8
        with:
          script: |

            const issue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            if (issue.data.labels.length > 0) {          
              console.log('PR already has labels, skipping');
              return;
            }
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: '@' + context.payload.pull_request.merged_by.login +
              ' Please assign appropriate label to PR according to the type of change.'
            });

            throw new Error('PRs must be labeled');

  # check PR assignee - if no one is assigned, assign to person who merge PR
  assignees:
    permissions:
      issues: write
      pull-requests: write

    if: >
      github.event.action == 'closed' &&
      github.event.pull_request.merged &&
      toJSON(github.event.pull_request.assignees) == '[]'
    runs-on: ubuntu-latest
    steps:

      - name: Assign PR
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8
        with:
          script: |

            const issue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            if (issue.data.assignees.length > 0) {
              console.log('PR already has assignees, skipping');
              return;
            }

            console.log(context.payload.pull_request.merged_by);

            const result = await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              assignees: [ context.payload.pull_request.merged_by.login ]
            });

            console.log(result);
